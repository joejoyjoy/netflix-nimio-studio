// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id       String    @id @default(uuid())
  name     String
  email    String    @unique
  image    String
  role     Role      @default(BASIC)
  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  BASIC
  ADMIN
}

model Director {
  id    String  @id @default(uuid())
  name  String  @unique
  born  Int
  bio   String
  Movie Movie[]
}

model Actor {
  id     String  @id @default(uuid())
  name   String  @unique
  born   Int
  bio    String
  movies Movie[] @relation("MovieToActor")
}

model Category {
  id     String  @id @default(uuid())
  name   String  @unique
  movies Movie[] @relation("MovieToCategory")
}

model Movie {
  id         String     @id @default(uuid())
  title      String     @unique
  overview   String
  year       Int
  duration   Int
  cover      Cover?
  director   Director   @relation(fields: [directorId], references: [id])
  directorId String
  categories Category[] @relation("MovieToCategory")
  actors     Actor[]    @relation("MovieToActor")
}

model Cover {
  id         String @id @default(uuid())
  public_id  String
  secure_url String

  movie   Movie  @relation(fields: [movieId], references: [id])
  movieId String @unique
}
